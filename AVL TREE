class Node:
    def __init__(self, val):
        self.height = 1
        self.left = None
        self.right = None
        self.val = val  # Using 'val' consistently


class AVLtree:
    def height(self, node):
        if node is None:
            return 0
        else:
            return node.height

    def balance(self, node):
        if node is None:
            return 0
        return self.height(node.left) - self.height(node.right)

    def left(self, x):

        y = x.right
        t = y.left
        y.left = x
        x.right = t
        x.height = max(self.height(x.left), self.height(x.right)) + 1
        y.height = max(self.height(y.left), self.height(y.right)) + 1
        return y

    def right(self, y):

        x = y.left  # Fixed: use left child, not right
        t = x.right
        x.right = y
        y.left = t
        y.height = max(self.height(y.left), self.height(y.right)) + 1
        x.height = max(self.height(x.left), self.height(x.right)) + 1
        return x

    def insert(self, root, key):
        
        if root is None:
            return Node(key)
        elif key < root.val:  
            root.left = self.insert(root.left, key)
        elif key > root.val:
            root.right = self.insert(root.right, key)  
        else:
            return root 
        root.height = max(self.height(root.left), self.height(root.right)) + 1
        bal = self.balance(root)

        
        if bal > 1 and key < root.left.val:
            return self.right(root)
        
        if bal > 1 and key > root.left.val:
            root.left = self.left(root.left)
            return self.right(root)
        
        if bal < -1 and key > root.right.val:
            return self.left(root)
            
        if bal < -1 and key < root.right.val:  
            root.right = self.right(root.right)
            return self.left(root)

        return root

    def inorder(self, root):
        if root:
            self.inorder(root.left)
            print(root.val, end=" ")  
            self.inorder(root.right)

    def preorder(self, root):
        if root:
            print(root.val, end=" ")  
            self.preorder(root.left)  
            self.preorder(root.right)  


if __name__ == "__main__":
    tree = AVLtree()
    root = None
    elements = [50, 30, 40, 20, 25, 45, 27]
    for key in elements:
        root = tree.insert(root, key)
    print("the inorder is:")
    tree.inorder(root)  
    print()
    print("the preorder is:")
    tree.preorder(root)  
    print()
    
    print(tree.height(root),tree.balance(root))
