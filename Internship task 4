import org.apache.mahout.cf.taste.eval.RecommenderEvaluator;
import org.apache.mahout.cf.taste.eval.RecommenderIRStatsEvaluator;
import org.apache.mahout.cf.taste.impl.eval.AverageAbsoluteDifferenceRecommenderEvaluator;
import org.apache.mahout.cf.taste.impl.eval.GenericRecommenderIRStatsEvaluator;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.recommender.Recommender;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;

import java.io.File;
import java.util.List;

public class RecommendationSystem {
    public static void main(String[] args) {
        try {
            // Load data model (CSV format: userID,itemID,preferenceValue)
            DataModel model = new FileDataModel(new File("data.csv"));

            // Similarity measure
            UserSimilarity similarity = new PearsonCorrelationSimilarity(model);

            // Neighborhood of 2 nearest users
            UserNeighborhood neighborhood = new NearestNUserNeighborhood(2, similarity, model);

            // Build recommender
            Recommender recommender = new GenericUserBasedRecommender(model, neighborhood, similarity);

            // Generate recommendations for user 1
            List<RecommendedItem> recommendations = recommender.recommend(1, 3);

            System.out.println("Recommendations for User 1:");
            for (RecommendedItem recommendation : recommendations) {
                System.out.println("Item: " + recommendation.getItemID() + " , Value: " + recommendation.getValue());
            }

            // Evaluate recommender
            RecommenderEvaluator evaluator = new AverageAbsoluteDifferenceRecommenderEvaluator();
            double score = evaluator.evaluate(
                    recommenderBuilder -> new GenericUserBasedRecommender(model, neighborhood, similarity),
                    null, model, 0.7, 1.0);
            System.out.println("Evaluation Score: " + score);

            // Precision/Recall evaluation
            RecommenderIRStatsEvaluator statsEvaluator = new GenericRecommenderIRStatsEvaluator();
            var stats = statsEvaluator.evaluate(
                    recommenderBuilder -> new GenericUserBasedRecommender(model, neighborhood, similarity),
                    null, model, null, 2,
                    GenericRecommenderIRStatsEvaluator.CHOOSE_THRESHOLD, 1.0);

            System.out.println("Precision: " + stats.getPrecision());
            System.out.println("Recall: " + stats.getRecall());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
